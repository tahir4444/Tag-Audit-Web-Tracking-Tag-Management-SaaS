import PDFDocument from 'pdfkit';
import { createObjectCsvWriter } from 'csv-writer';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class ReportService {
  constructor() {
    this.reportsDir = path.join(__dirname, '../reports');
    if (!fs.existsSync(this.reportsDir)) {
      fs.mkdirSync(this.reportsDir);
    }
  }

  /**
   * Generate a PDF report for an audit
   * @param {Object} website - Website object
   * @param {Object} audit - Audit results
   * @returns {Promise<string>} Path to generated PDF
   */
  async generatePDFReport(website, audit) {
    const filename = `audit_${website._id}_${Date.now()}.pdf`;
    const filepath = path.join(this.reportsDir, filename);
    
    return new Promise((resolve, reject) => {
      const doc = new PDFDocument();
      const stream = fs.createWriteStream(filepath);
      
      doc.pipe(stream);

      // Header
      doc.fontSize(20).text('Tag Audit Report', { align: 'center' });
      doc.moveDown();
      
      // Website Info
      doc.fontSize(16).text('Website Information');
      doc.fontSize(12)
        .text(`Name: ${website.name}`)
        .text(`URL: ${website.url}`)
        .text(`Platform: ${website.platform}`)
        .text(`Audit Date: ${audit.date.toLocaleString()}`);
      doc.moveDown();

      // Summary
      doc.fontSize(16).text('Audit Summary');
      doc.fontSize(12)
        .text(`Total Issues: ${audit.issues.length}`)
        .text(`High Severity: ${audit.issues.filter(i => i.severity === 'high').length}`)
        .text(`Medium Severity: ${audit.issues.filter(i => i.severity === 'medium').length}`)
        .text(`Low Severity: ${audit.issues.filter(i => i.severity === 'low').length}`);
      doc.moveDown();

      // Issues
      doc.fontSize(16).text('Detailed Issues');
      audit.issues.forEach((issue, index) => {
        doc.fontSize(12)
          .text(`${index + 1}. ${issue.type.toUpperCase()} - ${issue.severity.toUpperCase()}`)
          .text(`Description: ${issue.description}`)
          .text(`Page: ${issue.page}`)
          .text(`Fix Status: ${issue.fix.status}`)
          .text(`Fix Method: ${issue.fix.method}`);
        doc.moveDown();
      });

      // Footer
      doc.fontSize(10)
        .text('Generated by Tag Audit Software', { align: 'center' })
        .text(new Date().toLocaleString(), { align: 'center' });

      doc.end();

      stream.on('finish', () => resolve(filepath));
      stream.on('error', reject);
    });
  }

  /**
   * Generate a CSV report for an audit
   * @param {Object} website - Website object
   * @param {Object} audit - Audit results
   * @returns {Promise<string>} Path to generated CSV
   */
  async generateCSVReport(website, audit) {
    const filename = `audit_${website._id}_${Date.now()}.csv`;
    const filepath = path.join(this.reportsDir, filename);

    const csvWriter = createObjectCsvWriter({
      path: filepath,
      header: [
        { id: 'type', title: 'Issue Type' },
        { id: 'severity', title: 'Severity' },
        { id: 'description', title: 'Description' },
        { id: 'page', title: 'Page' },
        { id: 'fixStatus', title: 'Fix Status' },
        { id: 'fixMethod', title: 'Fix Method' }
      ]
    });

    const records = audit.issues.map(issue => ({
      type: issue.type,
      severity: issue.severity,
      description: issue.description,
      page: issue.page,
      fixStatus: issue.fix.status,
      fixMethod: issue.fix.method
    }));

    await csvWriter.writeRecords(records);
    return filepath;
  }

  /**
   * Clean up old reports
   * @param {number} maxAge - Maximum age of reports in milliseconds
   */
  async cleanupOldReports(maxAge = 7 * 24 * 60 * 60 * 1000) { // 7 days default
    const files = await fs.promises.readdir(this.reportsDir);
    const now = Date.now();

    for (const file of files) {
      const filepath = path.join(this.reportsDir, file);
      const stats = await fs.promises.stat(filepath);
      
      if (now - stats.mtimeMs > maxAge) {
        await fs.promises.unlink(filepath);
      }
    }
  }
}

export default new ReportService(); 